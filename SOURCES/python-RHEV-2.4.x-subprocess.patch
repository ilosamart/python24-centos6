--- Python-2.4.3/Lib/subprocess.py-2.4   2009-05-13 23:10:45.000000000 +0000
+++ Python-2.4.3/Lib/subprocess.py       2009-05-14 09:54:45.000000000 +0000
@@ -396,6 +396,13 @@
 def _cleanup():
     for inst in _active[:]:
         inst.poll()
+        if inst.poll(_deadstate=sys.maxint) >= 0:
+            try:
+                _active.remove(inst)
+            except ValueError:
+                # This can happen if two threads create a new Popen instance.
+                # It's harmless that it was already removed, so ignore.
+                pass
 
 PIPE = -1
 STDOUT = -2
@@ -489,6 +496,7 @@
         """Create new Popen instance."""
         _cleanup()
 
+        self._child_created = False
         if not isinstance(bufsize, (int, long)):
             raise TypeError("bufsize must be an integer")
 
@@ -554,8 +562,6 @@
             else:
                 self.stderr = os.fdopen(errread, 'rb', bufsize)
 
-        _active.append(self)
-
 
     def _translate_newlines(self, data):
         data = data.replace("\r\n", "\n")
@@ -563,6 +569,17 @@
         return data
 
 
+    def __del__(self, sys=sys):
+        if not self._child_created:
+            # We didn't get to successfully create a child process.
+            return
+        # In case the child hasn't been waited on, check if it's done.
+        self.poll(_deadstate=sys.maxint)
+        if self.returncode is None and _active is not None:
+            # Child is still running, keep us alive until we can wait on it.
+            _active.append(self)
+
+
     if mswindows:
         #
         # Windows methods
@@ -900,6 +917,7 @@
             self._set_cloexec_flag(errpipe_write)
 
             self.pid = os.fork()
+            self._child_created = True
             if self.pid == 0:
                 # Child
                 try:
@@ -984,10 +1002,8 @@
                 # Should never happen
                 raise RuntimeError("Unknown child exit status!")
 
-            _active.remove(self)
-
 
-        def poll(self):
+        def poll(self, _deadstate=None):
             """Check if child process has terminated.  Returns returncode
             attribute."""
             if self.returncode == None:
@@ -996,7 +1012,8 @@
                     if pid == self.pid:
                         self._handle_exitstatus(sts)
                 except os.error:
-                    pass
+                    if _deadstate is not None:
+                        self.returncode = _deadstate
             return self.returncode
 
 

