diff -up Python-2.4.3/Modules/audioop.c.CVE-2010-2089 Python-2.4.3/Modules/audioop.c
--- Python-2.4.3/Modules/audioop.c.CVE-2010-2089	2010-10-22 11:48:47.000000000 -0400
+++ Python-2.4.3/Modules/audioop.c	2010-10-22 11:57:31.000000000 -0400
@@ -148,6 +148,29 @@ static int stepsizeTable[89] = {
 
 static PyObject *AudioopError;
 
+static int
+audioop_check_size(int size)
+{
+	if ( size != 1 && size != 2 && size != 4 ) {
+		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
+		return 0;
+	} else {
+		return 1;
+	}
+}
+
+static int
+audioop_check_parameters(int len, int size)
+{
+	if (!audioop_check_size(size))
+		return 0;
+	if ( len % size != 0 ) {
+		PyErr_SetString(AudioopError, "not a whole number of frames");
+		return 0;
+	}
+	return 1;
+}
+
 static PyObject *
 audioop_getsample(PyObject *self, PyObject *args)
 {
@@ -157,10 +180,8 @@ audioop_getsample(PyObject *self, PyObje
 
 	if ( !PyArg_Parse(args, "(s#ii)", &cp, &len, &size, &i) )
 		return 0;
-	if ( size != 1 && size != 2 && size != 4 ) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+		return NULL;
 	if ( i < 0 || i >= len/size ) {
 		PyErr_SetString(AudioopError, "Index out of range");
 		return 0;
@@ -181,10 +202,8 @@ audioop_max(PyObject *self, PyObject *ar
 
 	if ( !PyArg_Parse(args, "(s#i)", &cp, &len, &size) )
 		return 0;
-	if ( size != 1 && size != 2 && size != 4 ) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+                return NULL;
 	for ( i=0; i<len; i+= size) {
 		if ( size == 1 )      val = (int)*CHARP(cp, i);
 		else if ( size == 2 ) val = (int)*SHORTP(cp, i);
@@ -205,10 +224,8 @@ audioop_minmax(PyObject *self, PyObject 
 
 	if (!PyArg_Parse(args, "(s#i)", &cp, &len, &size))
 		return NULL;
-	if (size != 1 && size != 2 && size != 4) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
+	if (!audioop_check_parameters(len, size))
 		return NULL;
-	}
 	for (i = 0; i < len; i += size) {
 		if (size == 1) val = (int) *CHARP(cp, i);
 		else if (size == 2) val = (int) *SHORTP(cp, i);
@@ -229,10 +246,8 @@ audioop_avg(PyObject *self, PyObject *ar
 
 	if ( !PyArg_Parse(args, "(s#i)", &cp, &len, &size) )
 		return 0;
-	if ( size != 1 && size != 2 && size != 4 ) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+		return NULL;
 	for ( i=0; i<len; i+= size) {
 		if ( size == 1 )      val = (int)*CHARP(cp, i);
 		else if ( size == 2 ) val = (int)*SHORTP(cp, i);
@@ -256,10 +271,8 @@ audioop_rms(PyObject *self, PyObject *ar
 
 	if ( !PyArg_Parse(args, "(s#i)", &cp, &len, &size) )
 		return 0;
-	if ( size != 1 && size != 2 && size != 4 ) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+		return NULL;
 	for ( i=0; i<len; i+= size) {
 		if ( size == 1 )      val = (int)*CHARP(cp, i);
 		else if ( size == 2 ) val = (int)*SHORTP(cp, i);
@@ -421,7 +434,7 @@ audioop_findmax(PyObject *self, PyObject
 	}
 	len1 >>= 1;
     
-	if ( len1 < len2 ) {
+	if ( len2 < 0 || len1 < len2 ) {
 		PyErr_SetString(AudioopError, "Input sample should be longer");
 		return 0;
 	}
@@ -460,10 +473,8 @@ audioop_avgpp(PyObject *self, PyObject *
 
 	if ( !PyArg_Parse(args, "(s#i)", &cp, &len, &size) )
 		return 0;
-	if ( size != 1 && size != 2 && size != 4 ) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+                return NULL;
 	/* Compute first delta value ahead. Also automatically makes us
 	** skip the first extreme value
 	*/
@@ -517,10 +528,8 @@ audioop_maxpp(PyObject *self, PyObject *
 
 	if ( !PyArg_Parse(args, "(s#i)", &cp, &len, &size) )
 		return 0;
-	if ( size != 1 && size != 2 && size != 4 ) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+		return NULL;
 	/* Compute first delta value ahead. Also automatically makes us
 	** skip the first extreme value
 	*/
@@ -568,10 +577,8 @@ audioop_cross(PyObject *self, PyObject *
 
 	if ( !PyArg_Parse(args, "(s#i)", &cp, &len, &size) )
 		return 0;
-	if ( size != 1 && size != 2 && size != 4 ) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+		return NULL;
 	ncross = -1;
 	prevval = 17; /* Anything <> 0,1 */
 	for ( i=0; i<len; i+= size) {
@@ -596,6 +603,8 @@ audioop_mul(PyObject *self, PyObject *ar
 
 	if ( !PyArg_Parse(args, "(s#id)", &cp, &len, &size, &factor ) )
 		return 0;
+	if (!audioop_check_parameters(len, size))
+		return NULL;
     
 	if ( size == 1 ) maxval = (double) 0x7f;
 	else if ( size == 2 ) maxval = (double) 0x7fff;
@@ -636,8 +645,14 @@ audioop_tomono(PyObject *self, PyObject 
 	int i;
 
 	if ( !PyArg_Parse(args, "(s#idd)", &cp, &len, &size, &fac1, &fac2 ) )
-		return 0;
-    
+		return 0;   
+	if (!audioop_check_parameters(len, size))
+		return NULL;
+	if ( ((len / size) & 1) != 0 ) {
+		PyErr_SetString(AudioopError, "not a whole number of frames");
+		return NULL;
+	}
+
 	if ( size == 1 ) maxval = (double) 0x7f;
 	else if ( size == 2 ) maxval = (double) 0x7fff;
 	else if ( size == 4 ) maxval = (double) 0x7fffffff;
@@ -681,6 +696,8 @@ audioop_tostereo(PyObject *self, PyObjec
 
 	if ( !PyArg_Parse(args, "(s#idd)", &cp, &len, &size, &fac1, &fac2 ) )
 		return 0;
+	if (!audioop_check_parameters(len, size))
+		return NULL;
     
 	if ( size == 1 ) maxval = (double) 0x7f;
 	else if ( size == 2 ) maxval = (double) 0x7fff;
@@ -740,6 +757,8 @@ audioop_add(PyObject *self, PyObject *ar
 			  &cp1, &len1, &cp2, &len2, &size ) )
 		return 0;
 
+	if (!audioop_check_parameters(len1, size))
+		return NULL;
 	if ( len1 != len2 ) {
 		PyErr_SetString(AudioopError, "Lengths should be the same");
 		return 0;
@@ -793,11 +812,8 @@ audioop_bias(PyObject *self, PyObject *a
 	if ( !PyArg_Parse(args, "(s#ii)",
 			  &cp, &len, &size , &bias) )
 		return 0;
-
-	if ( size != 1 && size != 2 && size != 4) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+		return NULL;
     
 	rv = PyString_FromStringAndSize(NULL, len);
 	if ( rv == 0 )
@@ -829,11 +845,8 @@ audioop_reverse(PyObject *self, PyObject
 	if ( !PyArg_Parse(args, "(s#i)",
 			  &cp, &len, &size) )
 		return 0;
-
-	if ( size != 1 && size != 2 && size != 4 ) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+		return NULL;
     
 	rv = PyString_FromStringAndSize(NULL, len);
 	if ( rv == 0 )
@@ -867,11 +880,10 @@ audioop_lin2lin(PyObject *self, PyObject
 			  &cp, &len, &size, &size2) )
 		return 0;
 
-	if ( (size != 1 && size != 2 && size != 4) ||
-	     (size2 != 1 && size2 != 2 && size2 != 4)) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+		return NULL;
+	if (!audioop_check_size(size2))
+		return NULL;
     
 	if (len/size > INT_MAX/size2) {
 		PyErr_SetString(PyExc_MemoryError,
@@ -920,10 +932,8 @@ audioop_ratecv(PyObject *self, PyObject 
 	if (!PyArg_ParseTuple(args, "s#iiiiO|ii:ratecv", &cp, &len, &size, &nchannels,
 			      &inrate, &outrate, &state, &weightA, &weightB))
 		return NULL;
-	if (size != 1 && size != 2 && size != 4) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
+	if (!audioop_check_size(size))
 		return NULL;
-	}
 	if (nchannels < 1) {
 		PyErr_SetString(AudioopError, "# of channels should be >= 1");
 		return NULL;
@@ -1106,10 +1116,8 @@ audioop_lin2ulaw(PyObject *self, PyObjec
 			  &cp, &len, &size) )
 		return 0;
 
-	if ( size != 1 && size != 2 && size != 4) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+		return NULL;
     
 	rv = PyString_FromStringAndSize(NULL, len/size);
 	if ( rv == 0 )
@@ -1140,10 +1148,8 @@ audioop_ulaw2lin(PyObject *self, PyObjec
 			  &cp, &len, &size) )
 		return 0;
 
-	if ( size != 1 && size != 2 && size != 4) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+		return NULL;
     
 	if (len > INT_MAX/size) {
 		PyErr_SetString(PyExc_MemoryError,
@@ -1181,10 +1187,8 @@ audioop_lin2adpcm(PyObject *self, PyObje
 		return 0;
     
 
-	if ( size != 1 && size != 2 && size != 4) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+		return NULL;
     
 	str = PyString_FromStringAndSize(NULL, len/(size*2));
 	if ( str == 0 )
@@ -1288,10 +1292,8 @@ audioop_adpcm2lin(PyObject *self, PyObje
 			  &cp, &len, &size, &state) )
 		return 0;
 
-	if ( size != 1 && size != 2 && size != 4) {
-		PyErr_SetString(AudioopError, "Size should be 1, 2 or 4");
-		return 0;
-	}
+	if (!audioop_check_parameters(len, size))
+		return NULL;
     
 	/* Decode state, should have (value, step) */
 	if ( state == Py_None ) {
